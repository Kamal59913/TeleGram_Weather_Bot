{"ast":null,"code":"var _jsxFileName = \"E:\\\\signup\\\\front-end\\\\assignment_telegram_bot\\\\src\\\\Pages\\\\AdminLogin\\\\index.js\",\n  _s = $RefreshSig$();\nimport { Link } from 'react-router-dom';\nimport Cookies from \"js-cookie\";\nimport AdminPanel from '../AdminPanel/adminPanel';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminLogin() {\n  _s();\n  const [isTokenExists, setIsTokenExists] = useState(false);\n  const popupRef = useRef(null);\n  const [authenticated, setAuthenticated] = useState(false);\n  useEffect(() => {\n    const token = Cookies.get('token');\n    const localStorageToken = localStorage.getItem('token');\n    if (token && token === localStorageToken) {\n      setAuthenticated(true);\n    } else {\n      console.log('Token mismatch or does not exist.');\n    }\n  }, []);\n  console.log(authenticated);\n  const handleGoogleLogin = () => {\n    try {\n      // Open a popup window for Google authentication\n      const popup = window.open('http://localhost:5000/google', 'Google Auth', 'width=600,height=600');\n      popupRef.current = popup;\n      retrieveToken();\n    } catch (error) {\n      setIsTokenExists(false);\n      console.error('Error logging in with Google:', error);\n    }\n  };\n  const retrieveToken = () => {\n    const token = Cookies.get('token');\n    if (token) {\n      // Store the token in localStorage for future use\n      setIsTokenExists(true);\n      localStorage.setItem('token', token);\n      if (popupRef.current) {\n        popupRef.current.close();\n      }\n    } else {\n      setIsTokenExists(false);\n      console.log('Token cookie does not exist or is not accessible.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isTokenExists ? /*#__PURE__*/_jsxDEV(AdminPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Display this content when the token does not exist\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome Sign In | Admin Panel |\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"google-signin-button.png\",\n        className: \"google-sign-in\",\n        onClick: handleGoogleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminLogin, \"nyOC/GEK1U3tkT2oqZ0ICxAyaqY=\");\n_c = AdminLogin;\nexport default AdminLogin;\nvar _c;\n$RefreshReg$(_c, \"AdminLogin\");","map":{"version":3,"names":["Link","Cookies","AdminPanel","React","useState","useEffect","useRef","AdminLogin","isTokenExists","setIsTokenExists","popupRef","authenticated","setAuthenticated","token","get","localStorageToken","localStorage","getItem","console","log","handleGoogleLogin","popup","window","open","current","retrieveToken","error","setItem","close"],"sources":["E:/signup/front-end/assignment_telegram_bot/src/Pages/AdminLogin/index.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport Cookies from \"js-cookie\";\nimport AdminPanel from '../AdminPanel/adminPanel';\nimport React, { useState, useEffect, useRef } from 'react';\n\n\nfunction AdminLogin() {\n  const [isTokenExists, setIsTokenExists] = useState(false);\n  const popupRef = useRef(null);\n  const [authenticated, setAuthenticated] = useState(false);\n\n\n  useEffect(() => {\n    const token = Cookies.get('token');\n    const localStorageToken = localStorage.getItem('token');\n\n    if (token && token === localStorageToken) {\n      setAuthenticated(true);\n    } else {\n      console.log('Token mismatch or does not exist.');\n    }\n  }, []);\n  console.log(authenticated)\n\n  const handleGoogleLogin = () => {\n    try {\n      // Open a popup window for Google authentication\n      const popup = window.open('http://localhost:5000/google', 'Google Auth', 'width=600,height=600');\n      popupRef.current = popup;\n      retrieveToken();  \n    } catch (error) {\n      setIsTokenExists(false);\n\n      console.error('Error logging in with Google:', error);\n    }\n  };\n\n \n  const retrieveToken = () => {\n    const token = Cookies.get('token');\n    if (token) {\n      // Store the token in localStorage for future use\n      setIsTokenExists(true);\n      localStorage.setItem('token', token);\n      if (popupRef.current) {\n        popupRef.current.close();\n      }\n\n    } else {\n      setIsTokenExists(false);\n      console.log('Token cookie does not exist or is not accessible.');\n    }\n  };\n\n  return (\n    <div>\n       {isTokenExists ? (\n        <AdminPanel />\n      ) : (\n        // Display this content when the token does not exist\n        <div>\n          <h1>Welcome Sign In | Admin Panel |</h1>\n              <img src=\"google-signin-button.png\" className=\"google-sign-in\" onClick={handleGoogleLogin}/>\n              \n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AdminLogin;\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAG3D,SAASC,UAAU,GAAG;EAAA;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMM,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAGzDC,SAAS,CAAC,MAAM;IACd,MAAMQ,KAAK,GAAGZ,OAAO,CAACa,GAAG,CAAC,OAAO,CAAC;IAClC,MAAMC,iBAAiB,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEvD,IAAIJ,KAAK,IAAIA,KAAK,KAAKE,iBAAiB,EAAE;MACxCH,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLM,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EACND,OAAO,CAACC,GAAG,CAACR,aAAa,CAAC;EAE1B,MAAMS,iBAAiB,GAAG,MAAM;IAC9B,IAAI;MACF;MACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAAC,8BAA8B,EAAE,aAAa,EAAE,sBAAsB,CAAC;MAChGb,QAAQ,CAACc,OAAO,GAAGH,KAAK;MACxBI,aAAa,EAAE;IACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdjB,gBAAgB,CAAC,KAAK,CAAC;MAEvBS,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAGD,MAAMD,aAAa,GAAG,MAAM;IAC1B,MAAMZ,KAAK,GAAGZ,OAAO,CAACa,GAAG,CAAC,OAAO,CAAC;IAClC,IAAID,KAAK,EAAE;MACT;MACAJ,gBAAgB,CAAC,IAAI,CAAC;MACtBO,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;MACpC,IAAIH,QAAQ,CAACc,OAAO,EAAE;QACpBd,QAAQ,CAACc,OAAO,CAACI,KAAK,EAAE;MAC1B;IAEF,CAAC,MAAM;MACLnB,gBAAgB,CAAC,KAAK,CAAC;MACvBS,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;IAClE;EACF,CAAC;EAED,oBACE;IAAA,UACIX,aAAa,gBACb,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;IAAA;IAEd;IACA;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAwC,eACpC;QAAK,GAAG,EAAC,0BAA0B;QAAC,SAAS,EAAC,gBAAgB;QAAC,OAAO,EAAEY;MAAkB;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EAGnG;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GA9DQb,UAAU;AAAA,KAAVA,UAAU;AAgEnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}