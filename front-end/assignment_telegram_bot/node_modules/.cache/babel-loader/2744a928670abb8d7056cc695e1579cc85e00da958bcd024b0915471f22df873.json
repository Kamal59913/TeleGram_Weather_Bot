{"ast":null,"code":"var _jsxFileName = \"E:\\\\signup\\\\front-end\\\\assignment_telegram_bot\\\\src\\\\Pages\\\\Inventory\\\\index.js\";\nimport { Link } from 'react-router-dom';\nimport Cookies from \"js-cookie\";\nimport Home from '../Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [isTokenExists, setIsTokenExists] = useState(false);\nfunction Dashboard() {\n  const handleGoogleLogin = () => {\n    try {\n      // Open a popup window for Google authentication\n      const popup = window.open('http://localhost:5000/google', 'Google Auth', 'width=600,height=600');\n      retrieveToken();\n      // const checkPopupClosed = setInterval(() => {\n      //   if (!popup || popup.closed || popup.closed === undefined) {\n      //     clearInterval(checkPopupClosed);\n      //     // The popup is closed, do something after authentication completes\n      //     // For instance, you can check if the user is authenticated, then close the popup\n      //     // After the authentication is done, close the popup\n      //     // For demonstration purposes, assuming the authentication process sets a flag in localStorage\n      //     if (document.getItem('isAuthenticated')) {\n      //       popup.close(); // Close the popup window\n      //     }\n      //   }\n      // }, 1000); // Check every second if the popup is closed\n    } catch (error) {\n      setIsTokenExists(false);\n      console.error('Error logging in with Google:', error);\n    }\n  };\n  const retrieveToken = () => {\n    const token = Cookies.get('token');\n    if (token) {\n      // Store the token in localStorage for future use\n      setIsTokenExists(true);\n      localStorage.setItem('token', token);\n      // Do further actions like navigating to a protected route or making authorized API calls\n    } else {\n      setIsTokenExists(false);\n      console.log('Token cookie does not exist or is not accessible.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isTokenExists ? /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Display this content when the token does not exist\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoogleLogin,\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Link","Cookies","Home","isTokenExists","setIsTokenExists","useState","Dashboard","handleGoogleLogin","popup","window","open","retrieveToken","error","console","token","get","localStorage","setItem","log"],"sources":["E:/signup/front-end/assignment_telegram_bot/src/Pages/Inventory/index.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport Cookies from \"js-cookie\";\nimport Home from '../Home';\nconst [isTokenExists, setIsTokenExists] = useState(false);\n\n\nfunction Dashboard() {\n  const handleGoogleLogin = () => {\n    try {\n      // Open a popup window for Google authentication\n      const popup = window.open('http://localhost:5000/google', 'Google Auth', 'width=600,height=600');\n\n      retrieveToken();\n      // const checkPopupClosed = setInterval(() => {\n      //   if (!popup || popup.closed || popup.closed === undefined) {\n      //     clearInterval(checkPopupClosed);\n      //     // The popup is closed, do something after authentication completes\n      //     // For instance, you can check if the user is authenticated, then close the popup\n      //     // After the authentication is done, close the popup\n      //     // For demonstration purposes, assuming the authentication process sets a flag in localStorage\n      //     if (document.getItem('isAuthenticated')) {\n      //       popup.close(); // Close the popup window\n      //     }\n      //   }\n      // }, 1000); // Check every second if the popup is closed\n    } catch (error) {\n      setIsTokenExists(false);\n\n      console.error('Error logging in with Google:', error);\n    }\n  };\n\n \n  const retrieveToken = () => {\n    const token = Cookies.get('token');\n    if (token) {\n      // Store the token in localStorage for future use\n      setIsTokenExists(true);\n      localStorage.setItem('token', token);\n      // Do further actions like navigating to a protected route or making authorized API calls\n    } else {\n      setIsTokenExists(false);\n      console.log('Token cookie does not exist or is not accessible.');\n    }\n  };\n\n  return (\n    <div>\n       {isTokenExists ? (\n        <Home />\n      ) : (\n        // Display this content when the token does not exist\n        <div>\n          <h1>Welcome</h1>\n          <button onClick={handleGoogleLogin}>Login with Google</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,IAAI,MAAM,SAAS;AAAC;AAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;AAGzD,SAASC,SAAS,GAAG;EACnB,MAAMC,iBAAiB,GAAG,MAAM;IAC9B,IAAI;MACF;MACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAAC,8BAA8B,EAAE,aAAa,EAAE,sBAAsB,CAAC;MAEhGC,aAAa,EAAE;MACf;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,gBAAgB,CAAC,KAAK,CAAC;MAEvBS,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAGD,MAAMD,aAAa,GAAG,MAAM;IAC1B,MAAMG,KAAK,GAAGb,OAAO,CAACc,GAAG,CAAC,OAAO,CAAC;IAClC,IAAID,KAAK,EAAE;MACT;MACAV,gBAAgB,CAAC,IAAI,CAAC;MACtBY,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;MACpC;IACF,CAAC,MAAM;MACLV,gBAAgB,CAAC,KAAK,CAAC;MACvBS,OAAO,CAACK,GAAG,CAAC,mDAAmD,CAAC;IAClE;EACF,CAAC;EAED,oBACE;IAAA,UACIf,aAAa,gBACb,QAAC,IAAI;MAAA;MAAA;MAAA;IAAA,QAAG;IAAA;IAER;IACA;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB,eAChB;QAAQ,OAAO,EAAEI,iBAAkB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA2B;IAAA;MAAA;MAAA;MAAA;IAAA;EAEjE;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,KArDQD,SAAS;AAuDlB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}