{"ast":null,"code":"var _jsxFileName = \"E:\\\\signup\\\\front-end\\\\assignment_telegram_bot\\\\src\\\\Pages\\\\WeatherPage\\\\index.js\",\n  _s = $RefreshSig$();\nimport { Card, Space, Statistic, Table, Typography } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { getCustomers, getInventory, getOrders, getRevenue } from \"../../API\";\nimport Weathercard from \"./Weathercard\";\nimport './app.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherPage() {\n  _s();\n  const [searchValue, setSearchValue] = useState(\"sibsagar\");\n  const [tempInfo, setTempInfo] = useState({}); //empty array passsing initially\n  //for the first time by default it should get something\n  const getWeatherInfo = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=75b31160e847eff782e127fda7c5665e`;\n      const res = await fetch(url);\n      const data = await res.json();\n      const {\n        temp,\n        humidity,\n        pressure\n      } = data.main;\n      console.log(temp);\n      console.log(humidity);\n      console.log(pressure);\n      const {\n        main: weathermood\n      } = data.weather[0];\n      const {\n        name\n      } = data;\n      const {\n        speed\n      } = data.wind;\n      const {\n        country,\n        sunset\n      } = data.sys;\n      //object creating out of weather properties\n      const myNewWeatherInfo = {\n        temp,\n        humidity,\n        pressure,\n        weathermood,\n        name,\n        speed,\n        country,\n        sunset\n      };\n      setTempInfo(myNewWeatherInfo);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  //automatic function call just after refreshing the page is can be done by useEffect hook\n  useEffect(() => {\n    getWeatherInfo();\n  }, []); //passing an empty array that means value reflects on the only very first time the page is refreshed\n\n  return /*#__PURE__*/_jsxDEV(Weathercard, {\n    tempinfo: tempInfo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 6\n  }, this);\n}\n_s(WeatherPage, \"WHqFZGd8KYRB+zl8x+dC3JpROy4=\");\n_c = WeatherPage;\nexport default WeatherPage;\nvar _c;\n$RefreshReg$(_c, \"WeatherPage\");","map":{"version":3,"names":["Card","Space","Statistic","Table","Typography","useEffect","useState","getCustomers","getInventory","getOrders","getRevenue","Weathercard","WeatherPage","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","url","res","fetch","data","json","temp","humidity","pressure","main","console","log","weathermood","weather","name","speed","wind","country","sunset","sys","myNewWeatherInfo","error"],"sources":["E:/signup/front-end/assignment_telegram_bot/src/Pages/WeatherPage/index.js"],"sourcesContent":["import { Card, Space, Statistic, Table, Typography } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { getCustomers, getInventory, getOrders, getRevenue } from \"../../API\";\nimport Weathercard from \"./Weathercard\";\nimport './app.css'\n\nfunction WeatherPage() {\n  const [searchValue,setSearchValue]= useState(\"sibsagar\");\n  const [tempInfo, setTempInfo] = useState({}); //empty array passsing initially\n  //for the first time by default it should get something\n  const getWeatherInfo = async()=> {\n      try{\n          let url=`https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=75b31160e847eff782e127fda7c5665e`;\n          const res= await fetch(url);\n          const data= await res.json();\n\n          const {temp,humidity,pressure} =data.main;\n          console.log(temp);\n          console.log(humidity);\n          console.log(pressure);\n          const {main:weathermood}=data.weather[0];\n          const {name} =data;\n          const {speed} =data.wind;\n          const {country,sunset} =data.sys; \n          //object creating out of weather properties\n          const myNewWeatherInfo ={\n              temp, humidity, pressure, weathermood, name, speed, country, sunset\n          };\n          setTempInfo(myNewWeatherInfo);\n      }catch(error){\n          console.log(error);\n      }\n  };\n  //automatic function call just after refreshing the page is can be done by useEffect hook\n  useEffect(() => {getWeatherInfo()}, []);//passing an empty array that means value reflects on the only very first time the page is refreshed\n\n  return (\n     <Weathercard tempinfo={tempInfo}/>\n  )}\nexport default WeatherPage;\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;AAChE,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,QAAQ,WAAW;AAC7E,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,WAAW;AAAA;AAElB,SAASC,WAAW,GAAG;EAAA;EACrB,MAAM,CAACC,WAAW,EAACC,cAAc,CAAC,GAAER,QAAQ,CAAC,UAAU,CAAC;EACxD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C;EACA,MAAMW,cAAc,GAAG,YAAU;IAC7B,IAAG;MACC,IAAIC,GAAG,GAAE,qDAAoDL,WAAY,sDAAqD;MAC9H,MAAMM,GAAG,GAAE,MAAMC,KAAK,CAACF,GAAG,CAAC;MAC3B,MAAMG,IAAI,GAAE,MAAMF,GAAG,CAACG,IAAI,EAAE;MAE5B,MAAM;QAACC,IAAI;QAACC,QAAQ;QAACC;MAAQ,CAAC,GAAEJ,IAAI,CAACK,IAAI;MACzCC,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;MACjBI,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;MACrBG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrB,MAAM;QAACC,IAAI,EAACG;MAAW,CAAC,GAACR,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC;MACxC,MAAM;QAACC;MAAI,CAAC,GAAEV,IAAI;MAClB,MAAM;QAACW;MAAK,CAAC,GAAEX,IAAI,CAACY,IAAI;MACxB,MAAM;QAACC,OAAO;QAACC;MAAM,CAAC,GAAEd,IAAI,CAACe,GAAG;MAChC;MACA,MAAMC,gBAAgB,GAAE;QACpBd,IAAI;QAAEC,QAAQ;QAAEC,QAAQ;QAAEI,WAAW;QAAEE,IAAI;QAAEC,KAAK;QAAEE,OAAO;QAAEC;MACjE,CAAC;MACDnB,WAAW,CAACqB,gBAAgB,CAAC;IACjC,CAAC,QAAMC,KAAK,EAAC;MACTX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;IACtB;EACJ,CAAC;EACD;EACAjC,SAAS,CAAC,MAAM;IAACY,cAAc,EAAE;EAAA,CAAC,EAAE,EAAE,CAAC,CAAC;;EAExC,oBACG,QAAC,WAAW;IAAC,QAAQ,EAAEF;EAAS;IAAA;IAAA;IAAA;EAAA,QAAE;AACpC;AAAC,GAhCKH,WAAW;AAAA,KAAXA,WAAW;AAiCpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}