{"ast":null,"code":"var _jsxFileName = \"E:\\\\signup\\\\front-end\\\\assignment_telegram_bot\\\\src\\\\Pages\\\\AdminLogin\\\\index.js\",\n  _s = $RefreshSig$();\nimport { Link } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport AdminPanel from '../AdminPanel/adminPanel';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminLogin() {\n  _s();\n  const [authenticated, setAuthenticated] = useState(false);\n  const popupRef = useRef(null);\n  useEffect(() => {\n    const token = Cookies.get('token');\n    const localStorageToken = localStorage.getItem('token');\n    if (token && token === localStorageToken) {\n      setAuthenticated(true);\n    } else {\n      console.log('Token mismatch or does not exist.');\n    }\n  }, []);\n  console.log(authenticated);\n  const handleGoogleLogin = () => {\n    try {\n      // Open a popup window for Google authentication\n      const popup = window.open('http://localhost:5000/google', 'Google Auth', 'width=600,height=600');\n      popupRef.current = popup;\n\n      // Start an interval to check for window closed status\n      const interval = setInterval(() => {\n        if (popupRef.current.closed) {\n          clearInterval(interval);\n\n          // Check if authentication was successful and redirect\n          if (authenticated) {\n            window.location.href = '/admin-panel'; // Redirect to the admin panel\n          }\n        }\n      }, 1000);\n    } catch (error) {\n      console.error('Error logging in with Google:', error);\n    }\n  };\n  const receiveMessage = event => {\n    if (event.origin !== 'http://localhost:5000') {\n      return;\n    }\n    if (event.data === 'authentication_success') {\n      setAuthenticated(true);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('message', receiveMessage);\n    return () => {\n      window.removeEventListener('message', receiveMessage);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: authenticated ? /*#__PURE__*/_jsxDEV(AdminPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome Sign In | Admin Panel |\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"google-signin-button.png\",\n        className: \"google-sign-in\",\n        onClick: handleGoogleLogin,\n        alt: \"Google Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminLogin, \"OtToRZ1IfAkhxlGOIAH3EOf18x8=\");\n_c = AdminLogin;\nexport default AdminLogin;\nvar _c;\n$RefreshReg$(_c, \"AdminLogin\");","map":{"version":3,"names":["Link","Cookies","AdminPanel","React","useState","useEffect","useRef","AdminLogin","authenticated","setAuthenticated","popupRef","token","get","localStorageToken","localStorage","getItem","console","log","handleGoogleLogin","popup","window","open","current","interval","setInterval","closed","clearInterval","location","href","error","receiveMessage","event","origin","data","addEventListener","removeEventListener"],"sources":["E:/signup/front-end/assignment_telegram_bot/src/Pages/AdminLogin/index.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport AdminPanel from '../AdminPanel/adminPanel';\nimport React, { useState, useEffect, useRef } from 'react';\n\nfunction AdminLogin() {\n  const [authenticated, setAuthenticated] = useState(false);\n  const popupRef = useRef(null);\n\n  useEffect(() => {\n    const token = Cookies.get('token');\n    const localStorageToken = localStorage.getItem('token');\n\n    if (token && token === localStorageToken) {\n      setAuthenticated(true);\n    } else {\n      console.log('Token mismatch or does not exist.');\n    }\n  }, []);\n\n  console.log(authenticated);\n\n  const handleGoogleLogin = () => {\n    try {\n      // Open a popup window for Google authentication\n      const popup = window.open(\n        'http://localhost:5000/google',\n        'Google Auth',\n        'width=600,height=600'\n      );\n      popupRef.current = popup;\n\n      // Start an interval to check for window closed status\n      const interval = setInterval(() => {\n        if (popupRef.current.closed) {\n          clearInterval(interval);\n\n          // Check if authentication was successful and redirect\n          if (authenticated) {\n            window.location.href = '/admin-panel'; // Redirect to the admin panel\n          }\n        }\n      }, 1000);\n    } catch (error) {\n      console.error('Error logging in with Google:', error);\n    }\n  };\n\n  const receiveMessage = (event) => {\n    if (event.origin !== 'http://localhost:5000') {\n      return;\n    }\n\n    if (event.data === 'authentication_success') {\n      setAuthenticated(true);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('message', receiveMessage);\n\n    return () => {\n      window.removeEventListener('message', receiveMessage);\n    };\n  }, []);\n\n  return (\n    <div>\n      {authenticated ? (\n        <AdminPanel />\n      ) : (\n        <div>\n          <h1>Welcome Sign In | Admin Panel |</h1>\n          <img\n            src=\"google-signin-button.png\"\n            className=\"google-sign-in\"\n            onClick={handleGoogleLogin}\n            alt=\"Google Sign In\"\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AdminLogin;\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAE3D,SAASC,UAAU,GAAG;EAAA;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMM,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMM,KAAK,GAAGV,OAAO,CAACW,GAAG,CAAC,OAAO,CAAC;IAClC,MAAMC,iBAAiB,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEvD,IAAIJ,KAAK,IAAIA,KAAK,KAAKE,iBAAiB,EAAE;MACxCJ,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLO,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EAEND,OAAO,CAACC,GAAG,CAACT,aAAa,CAAC;EAE1B,MAAMU,iBAAiB,GAAG,MAAM;IAC9B,IAAI;MACF;MACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CACvB,8BAA8B,EAC9B,aAAa,EACb,sBAAsB,CACvB;MACDX,QAAQ,CAACY,OAAO,GAAGH,KAAK;;MAExB;MACA,MAAMI,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAId,QAAQ,CAACY,OAAO,CAACG,MAAM,EAAE;UAC3BC,aAAa,CAACH,QAAQ,CAAC;;UAEvB;UACA,IAAIf,aAAa,EAAE;YACjBY,MAAM,CAACO,QAAQ,CAACC,IAAI,GAAG,cAAc,CAAC,CAAC;UACzC;QACF;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAED,MAAMC,cAAc,GAAIC,KAAK,IAAK;IAChC,IAAIA,KAAK,CAACC,MAAM,KAAK,uBAAuB,EAAE;MAC5C;IACF;IAEA,IAAID,KAAK,CAACE,IAAI,KAAK,wBAAwB,EAAE;MAC3CxB,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;EAEDJ,SAAS,CAAC,MAAM;IACde,MAAM,CAACc,gBAAgB,CAAC,SAAS,EAAEJ,cAAc,CAAC;IAElD,OAAO,MAAM;MACXV,MAAM,CAACe,mBAAmB,CAAC,SAAS,EAAEL,cAAc,CAAC;IACvD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,UACGtB,aAAa,gBACZ,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG,gBAEd;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAwC,eACxC;QACE,GAAG,EAAC,0BAA0B;QAC9B,SAAS,EAAC,gBAAgB;QAC1B,OAAO,EAAEU,iBAAkB;QAC3B,GAAG,EAAC;MAAgB;QAAA;QAAA;QAAA;MAAA,QACpB;IAAA;MAAA;MAAA;MAAA;IAAA;EAEL;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GA9EQX,UAAU;AAAA,KAAVA,UAAU;AAgFnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}